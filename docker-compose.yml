services:
  db:
    container_name: postgres
    image: postgres:13
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    user: "1000:1000" 
    environment:
      - DJANGO_SETTINGS_MODULE=transcendence.settings
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py collectstatic --noinput &&  
        python manage.py makemigrations &&
        python manage.py migrate &&
        daphne -e ssl:8000:privateKey=/app/cert.key:certKey=/app/cert.crt transcendence.asgi:application"
  
    volumes:
      - ./transcendence:/app:cached
      - static_volume:/app/staticfiles
    expose:
      - "8000"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
      image: nginx:alpine
      container_name: nginx
      volumes:
        - ./transcendence:/etc/nginx/ssl:ro
        - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Your Nginx config
        - ./transcendence/media:/usr/share/nginx/html/media:ro  # Serve media files
        - static_volume:/usr/share/nginx/html/static:ro
      ports:
        - "8443:443"  # Expose port 443 for HTTPS
      networks:
        - transcendence
      depends_on:
        - backend
      restart: unless-stopped

  tournament:
    container_name: tournament
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${TOURNAMENT_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py makemigrations &&
        python manage.py migrate --database=tournament &&
        daphne -e ssl:8001:privateKey=/app/cert.key:certKey=/app/cert.crt transcendence.asgi:application"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8001:8001"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8001 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  rps:
    container_name: rps
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${RPS_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py migrate --database=rps &&
        daphne -e ssl:8002:privateKey=/app/cert.key:certKey=/app/cert.crt transcendence.asgi:application"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8002:8002"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8002 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: "redis:alpine"
    ports:
      - "6380:6379"
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  pong:
    container_name: pong
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${PONG_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py migrate --database=pong &&
        daphne -e ssl:8003:privateKey=/app/cert.key:certKey=/app/cert.crt transcendence.asgi:application"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8003:8003"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8003 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  transcendence:

volumes:
  static_volume:
  postgres_data:
