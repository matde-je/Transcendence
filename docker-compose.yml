services:
  db:
    container_name: postgres
    image: postgres:13
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: django
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=transcendence.settings
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        daphne -e ssl:8000:privateKey=/app/cert.key:certKey=/app/cert.crt transcendence.asgi:application"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8000:8000"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8000 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  tournament:
    container_name: tournament
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${TOURNAMENT_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py migrate --database=tournament &&
        python manage.py runserver_plus --cert-file cert.pem 0.0.0.0:8001"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8001:8001"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8001 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  rps:
    container_name: rps
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${RPS_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py migrate --database=rps &&
        python manage.py runserver_plus --cert-file cert.pem 0.0.0.0:8002"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8002:8002"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8002 --insecure || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: "redis:alpine" 
    ports:
      - "6379:6379"
    networks:
      - transcendence
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  pong:
    container_name: pong
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        until pg_isready -h db -p 5432 -U $${POSTGRES_USER} -d $${PONG_DB_NAME}; do
          echo 'Waiting for Postgres...';
          sleep 2;
        done &&
        python manage.py migrate --database=pong &&
        python manage.py runserver_plus --cert-file cert.pem 0.0.0.0:8003"
    volumes:
      - ./transcendence:/app:cached
    ports:
      - "8003:8003"
    networks:
      - transcendence
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8003 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  transcendence:

volumes:
  postgres_data:
